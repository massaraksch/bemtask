{
  "author": {
    "name": "Andrew Abramov",
    "email": "andrewblond@yandex.com"
  },
  "description": "bem-xjst support for ENB",
  "name": "enb-bemxjst",
  "version": "2.0.0-rc",
  "repository": {
    "type": "git",
    "url": "git://github.com/enb-bem/enb-bemxjst"
  },
  "homepage": "https://github.com/enb-bem/enb-bemxjst",
  "bugs": {
    "url": "https://github.com/enb-bem/enb-bemxjst/issues"
  },
  "licenses": [
    {
      "type": "MPL-2.0",
      "url": "https://github.com/enb-bem/enb-bemxjst/blob/master/LICENSE.txt"
    }
  ],
  "contributors": [
    {
      "name": "Andrew Abramov",
      "email": "andrewblond@yandex.com"
    },
    {
      "name": "Marat Dulin",
      "email": "mdevils@yandex.ru"
    }
  ],
  "engines": {
    "node": ">= 0.10.0"
  },
  "peerDependencies": {
    "enb": ">= 0.16.0 < 1.0.0"
  },
  "dependencies": {
    "bem-xjst": "1.2.1",
    "bemhtml-compat": "0.1.2",
    "browserify": "11.0.1",
    "vow": "0.4.10",
    "vow-node": "0.3.0"
  },
  "devDependencies": {
    "enb": ">= 0.16.0 < 1.0.0",
    "istanbul": "0.3.18",
    "jscs": "1.13.1",
    "jshint": "2.8.0",
    "mocha": "2.2.5",
    "mock-enb": "0.1.0",
    "mock-fs": "3.1.0",
    "mock-require": "1.1.0",
    "must": "0.12.0",
    "chai": "3.2.0",
    "mocha-phantomjs": "3.5.6",
    "phantomjs": "1.9.18",
    "finalhandler": "0.4.0",
    "serve-static": "1.10.0",
    "ym": "0.1.2"
  },
  "scripts": {
    "test": "npm run lint && npm run unit",
    "unit": "mocha -R spec",
    "lint": "jshint . && jscs -c .jscs.js .",
    "cover": "istanbul cover _mocha",
    "coveralls": "npm i coveralls && npm run cover -- --report lcovonly && cat ./coverage/lcov.info | coveralls"
  },
  "gitHead": "aee84d7102cf24322ffa3a50511e5d33263ecba5",
  "_id": "enb-bemxjst@2.0.0-rc",
  "_shasum": "1d4da19f17e5afaf4bb7f5df8ea2af49d9bfe709",
  "_from": "enb-bemxjst@v2.0.0-rc",
  "_npmVersion": "1.4.28",
  "_npmUser": {
    "name": "blond",
    "email": "andrewblond@yandex.com"
  },
  "maintainers": [
    {
      "name": "mdevils",
      "email": "mdevils@yandex.ru"
    },
    {
      "name": "blond",
      "email": "andrewblond@yandex.com"
    }
  ],
  "dist": {
    "shasum": "1d4da19f17e5afaf4bb7f5df8ea2af49d9bfe709",
    "tarball": "http://registry.npmjs.org/enb-bemxjst/-/enb-bemxjst-2.0.0-rc.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/enb-bemxjst/-/enb-bemxjst-2.0.0-rc.tgz",
  "readme": "enb-bemxjst\n===========\n\n[![NPM version](https://img.shields.io/npm/v/enb-bemxjst.svg?style=flat)](https://www.npmjs.org/package/enb-bemxjst) [![Build Status](https://img.shields.io/travis/enb-bem/enb-bemxjst/master.svg?style=flat&label=tests)](https://travis-ci.org/enb-bem/enb-bemxjst) [![Build status](https://img.shields.io/appveyor/ci/blond/enb-bemxjst.svg?style=flat&label=windows)](https://ci.appveyor.com/project/blond/enb-bemxjst) [![Coverage Status](https://img.shields.io/coveralls/enb-bem/enb-bemxjst.svg?style=flat)](https://coveralls.io/r/enb-bem/enb-bemxjst?branch=master) [![Dependency Status](https://img.shields.io/david/enb-bem/enb-bemxjst.svg?style=flat)](https://david-dm.org/enb-bem/enb-bemxjst)\n\nПакет предоставляет набор [ENB](https://ru.bem.info/tools/bem/enb-bem/)-технологий для сборки [BEMHTML](https://ru.bem.info/technology/bemhtml/current/reference/)- и [BEMTREE](https://ru.bem.info/technology/bemtree/)-шаблонов в проектах, построенных по [методологии БЭМ](https://ru.bem.info/method/).\n\n**Важно**: базовые шаблоны для BEMHTML и BEMTREE находятся в библиотеке [bem-core](https://ru.bem.info/libs/bem-core/). Для технологий, базовые шаблоны которых находятся в библиотеке [bem-bl](https://ru.bem.info/libs/bem-bl/), следует использовать пакет [enb-xjst](https://ru.bem.info/tools/bem/enb-xjst/readme/).\n\n**Технологии пакета `enb-bemxjst`:**\n\n* [bemhtml](api.ru.md#bemhtml)\n* [bemtree](api.ru.md#bemtree)\n* [bemjson-to-html](api.ru.md#bemjson-to-html)\n\nПринципы работы технологий и их API описаны в документе [API технологий](api.ru.md).\n\n**Совместимость:** технологии пакета `enb-bemxjst` используют [компилятор BEM-XJST](https://ru.bem.info/tools/templating-engines/bemxjst/) версии `1.2.1`.\n\nУстановка\n---------\n\nУстановите пакет `enb-bemxjst`:\n\n```sh\n$ npm install --save-dev enb-bemxjst\n```\n\n**Требования:** зависимость от пакета `enb` версии `0.16.0` и выше.\n\nОбзор документа\n---------------\n\n* [Быстрый старт](#Быстрый-старт)\n* [Работа с технологиями](#Работа-с-технологиями)\n    * [Исполнение шаблонов в Node.js](#Исполнение-шаблонов-в-nodejs)\n    * [Исполнение шаблонов в браузере](#Исполнение-шаблонов-в-браузере)\n    * [Использование шаблонов для сборки HTML](#Использование-шаблонов-для-сборки-html)\n* [Особенности работы пакета](#Особенности-работы-пакета)\n    * [Подключение сторонних библиотек](#Подключение-сторонних-библиотек)\n    * [Синтаксис](#Синтаксис)\n    * [Асинхронная шаблонизация](#Асинхронная-шаблонизация)\n    * [Интернационализация](#Интернационализация)\n* [Дополнительная документация](#Дополнительная-документация)\n\nБыстрый старт\n-------------\n\nПодключите необходимые технологии: [bemhtml](api.ru.md#bemhtml), [bemtree](api.ru.md#bemtree).\n\n```js\nvar BemtreeTech = require('enb-bemxjst/techs/bemtree'),\n    BemhtmlTech = require('enb-bemxjst/techs/bemhtml'),\n    FileProvideTech = require('enb/techs/file-provider'),\n    bemTechs = require('enb-bem-techs');\n\n module.exports = function(config) {\n     config.node('bundle', function(node) {\n         // Получаем FileList\n         node.addTechs([\n             [FileProvideTech, { target: '?.bemdecl.js' }],\n             [bemTechs.levels, levels: ['blocks']],\n             bemTechs.deps,\n             bemTechs.files\n         ]);\n\n         // Создаем BEMTREE-файл\n         node.addTech(BemtreeTech);\n         node.addTarget('?.bemtree.js');\n\n         // Создаем BEMHTML-файл\n         node.addTech(BemhtmlTech);\n         node.addTarget('?.bemhtml.js');\n     });\n };\n```\n\nДля сборки HTML используйте технологию [bemjson-to-html](api.ru.md#bemjson-to-html).\n\n```js\nvar BemjsonToHtmlTech = require('enb-bemxjst/techs/bemjson-to-html'),\n    BemhtmlTech = require('enb-bemxjst/techs/bemhtml'),\n    FileProvideTech = require('enb/techs/file-provider'),\n    bemTechs = require('enb-bem-techs');\n\nmodule.exports = function(config) {\n    config.node('bundle', function(node) {\n        // Получаем BEMJSON-файл\n        node.addTech([FileProvideTech, { target: '?.bemjson.js' }]);\n\n        // Получаем FileList\n        node.addTechs([\n            [bemTechs.levels, levels: ['blocks']],\n            bemTechs.bemjsonToBemdecl,\n            bemTechs.deps,\n            bemTechs.files\n        ]);\n\n        // Собираем BEMHTML-файл\n        node.addTech(BemhtmlTech);\n        node.addTarget('?.bemhtml.js');\n\n        // Создаем HTML-файл\n        node.addTech(BemjsonToHtmlTech);\n        node.addTarget('?.html');\n    });\n};\n```\n\nРабота с технологиями\n---------------------\n\nПо БЭМ-методологии шаблоны к каждому блоку хранятся в отдельных файлах с расширением `.bemhtml.js` или `.bemtree.js` в директориях блоков. Чтобы использовать шаблоны, необходимо собрать их исходные файлы.\n\nОтдельные файлы с шаблонами (`.bemhtml.js` или `.bemtree.js`) собираются в один общий файл (`?.bemhtml.js` или `?.bemtree.js`) с помощью одной из следующих технологий:\n\n* [bemhtml](api.ru.md#bemhtml)\n* [bemtree](api.ru.md#bemtree)\n\nРезультат — скомпилированный файл `?.bemhtml.js` или `?.bemtree.js` — может применяться по-разному в зависимости от наличия модульной системы и ее типа в следующих случаях:\n\n* [в Node.js](#Исполнение-шаблонов-в-nodejs)\n* [в браузере](#Исполнение-шаблонов-в-браузере)\n* [для сборки HTML](#Использование-шаблонов-для-сборки-html)\n\n### Исполнение шаблонов в Node.js\n\nСкомпилированный файл подключается как модуль в формате [CommonJS](http://www.commonjs.org/).\n\n```js\nvar BEMTREE = require('bundle.bemtree.js').BEMTREE, // Путь до скомпилированного BEMTREE-файла\n    BEMHTML = require('bundle.bemhtml.js').BEMHTML; // Путь до скомпилированного BEMHTML-файла\n\nBEMTREE.apply({ block: 'page', data: { /* ... */ } })\n    .then(function (bemjson) {\n        var html = BEMHTML.apply(bemjson);\n    });\n```\n\n### Исполнение шаблонов в браузере\n\nСкомпилированный файл подключается на страницу как JavaScript-файл.\n\n```html\n<script src=\"bundle.bemtree.js\"></script>\n<script src=\"bundle.bemhtml.js\"></script>\n```\n\nВ браузере способы исполнения шаблонов зависят от наличия модульной системы:\n\n* **Без модульной системы**\n\n  Шаблоны доступны из глобальной переменной `BEMHTML` или `BEMTREE`.\n\n  ```js\n  BEMTREE.apply({ block: 'page', data: { /* ... */ } })\n      .then(function (bemjson) {\n          var html = BEMHTML.apply(bemjson);\n      });\n  ```\n* **С модульной системой YModules**\n\n  Шаблоны доступны из модульной системы ([YModules](https://ru.bem.info/tools/bem/modules/)):\n\n  ```js\n  modules.require(['BEMTREE', 'BEMHTML'], function(BEMTREE, BEMHTML) {\n      BEMTREE.apply({ block: 'page', data: { /* ... */ } })\n          .then(function (bemjson) {\n              var html = BEMHTML.apply(bemjson);\n          });\n  });\n  ```\n\n### Использование шаблонов для сборки HTML\n\nHTML – результат применения скомпилированного шаблона к указанному [BEMJSON](https://ru.bem.info/technology/bemjson/current/bemjson/)-файлу.\n\nСборка HTML (файл `?.html`) с помощью технологий `enb-bemxjst` проходит в два этапа:\n\n1. Файл `?.bemhtml.js` собирается с помощью технологии [bemhtml](api.ru.md#bemhtml).\n2. BEMJSON и скомпилированный `?.bemhtml.js-файл` обрабатываются с помощью технологии [bemjson-to-html](#bemjson-to-html), которая возвращает HTML-файл (`?.html`).\n\nОсобенности работы пакета\n-------------------------\n\n### Подключение сторонних библиотек\n\nТехнологии [bemhtml](api.ru.md#bemhtml) и [bemtree](api.ru.md#bemtree) поддерживают возможность подключения сторонних библиотек как глобально, так и для разных модульных систем с помощью опции [requires](api.ru.md#requires).\n\nДля подключения укажите название библиотеки и в зависимости от используемой модульной системы:\n\n* имя глобальной переменной;\n* имя модуля из YModules;\n* путь к модулю для CommonJS.\n\n```js\n{\n    requires: {\n        'lib-name': {\n            globals: 'libName',           // Название переменной в глобальной видимости\n            ym: 'lib-name',               // Имя модуля из YModules\n            commonJS: 'path/to/lib-name'  // Путь к модулю CommonJS относительно собираемого файла\n        }\n    }\n}\n```\n\nВ шаблонах модули будут доступны с помощью метода `this.require`, например:\n\n```js\nblock('button').content()(function () {\n    var lib = this.require('lib-name');\n\n    return lib.hello();\n});\n```\n\nНе обязательно указывать все модульные системы для подключения библиотеки.\n\nНапример, можно указать зависимости глобально. В этом случае модуль всегда будет передаваться из глобальной переменной, даже если в среде исполнения будет модульная система.\n\n```js\n{\n    requires: {\n        'lib-name': {\n            globals: 'dependName' // Название переменной в глобальной видимости\n        }\n    }\n}\n```\n\n**Пример подключения библиотеки `moment`**\n\nУказывается путь к модулю:\n\n```js\n{\n    requires: {\n        moment: {\n            commonJS: 'moment',  // Путь к модулю CommonJS относительно собираемого файла\n        }\n    }\n}\n```\n\nВ шаблонах модуль будет доступен с помощью метода `this.require('moment')`. Код шаблона пишется один раз, одинаково для исполнения в браузере и в `Node.js`:\n\n```js\nblock('post').elem('data').content()(function () {\n    var moment = this.require('moment'),  // Библиотека `moment`\n\n    // Время в миллисекундах, полученное с сервера\n    return moment(ctx.param.date).format('YYYY-MM-DD HH:mm:ss');\n});\n```\n\n### Синтаксис\n\nСуществует два синтаксиса для шаблонов BEMHTML и BEMTREE:\n\n* [JS-синтаксис](https://ru.bem.info/technology/bemhtml/current/bemhtml-js-syntax/)\n* [сокращенный синтаксис](https://ru.bem.info/technology/bemhtml/current/reference/)\n\n#### Какой выбрать?\n\nС момента выпуска библиотеки [bem-core](https://ru.bem.info/libs/bem-core/) сокращенный синтаксис шаблонов считается устаревшим. Рекомендуется использовать JS-синтаксис для всех шаблонов.\n\nО правилах перехода на JS-синтаксис читайте в [руководстве по миграции](https://ru.bem.info/technology/bemhtml/current/bemhtml-js-syntax/).\n\n#### Поддержка сокращенного синтаксиса\n\nТехнологии [bemhtml](api.ru.md#bemhtml) и [bemtree](api.ru.md#bemtree) позволяют собирать шаблоны в сокращенном синтаксисе c помощью опции [compat](api.ru.md#compat).\n\nЭто может быть полезно при миграции c `bem-bl` на `bem-core`. Опция [compat](api.ru.md#compat) позволяет поэтапно переходить на JS-синтакис для каждого отдельного шаблона, а не переписывать код всего проекта целиком.\n\nВ процессе сборки шаблоны, написанные в сокращенном синтаксисе, приводятся к JS-синтаксису. Синтаксическое преобразование производит модуль [bemhtml-compat](https://github.com/bem/bemhtml-compat). Из-за транслирования сборка происходит медленнее даже для файлов в JS-синтаксисе.\n\nШаблоны в сокращенном синтаксисе следует хранить в файлах с расширениями `.bemhtml` и `.bemtree`, а не `.bemhtml.js` и `.bemtree.js`.\n\n**Важно:** оба синтаксиса не могут использоваться одновременно в файле шаблона.\n\n### Асинхронная шаблонизация\n\nТехнология [BEMTREE](https://ru.bem.info/technology/bemtree/current/bemtree/) работает асинхронно. Для обработки асинхронных вызовов используются промисы. Это означает, что после подключения скомпилированного BEMTREE-файла и вызова метода [BEMTREE.apply](https://ru.bem.info/technology/bemtree/v2/bemtree/#Входные-и-результирующие-данные-bemjson), который применит шаблоны к данным, вернется промис.\n\nДля работы с промисами используется библиотека [vow](http://dfilatov.github.io/vow/) версии `0.4.10`.\n\n**Важно:** технология [BEMHTML](https://ru.bem.info/technology/bemhtml/current/reference/) работает синхронно, асинхронная работа невозможна.\n\n### Интернационализация\n\nБазовая реализация BEM-XJST-технологий не содержит шаблонов для интернационализации (i18n).\n\nЧтобы использовать i18n в шаблонах, следует подключить модуль `BEM.I18N` по аналогии с другими [сторонними библиотеками](#Подключение-сторонних-библиотек).\n\n> `BEM.I18N` — библиотека для интернационализации блоков. Ядро находится в `keyset`-файлах в одной из базовых библиотек блоков:\n* [bem-core](https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__i18n/i-bem__i18n.i18n/core.js)\n* [bem-bl](https://github.com/bem/bem-bl/blob/support/2.x/blocks-common/i-bem/__i18n/i-bem__i18n.i18n/core.js)\n\nПосле подключения `BEM.I18N` библиотека будет доступна в шаблонах с помощью метода `this.require`:\n\n```js\nblock('button').elem('tooltip').content()(function () {\n    var i18n = this.require('i18n'),  // Библиотека `BEM.I18N`\n\n    // Локализованное значение для ключа `tooltip`\n    return i18n('button', 'tooltip');\n});\n```\n\nДополнительная документация\n---------------------------\n\n* [API технологий](api.ru.md)\n* [Быстрый старт по BEMHTML](https://ru.bem.info/technology/bemhtml/current/intro/)\n* [Описание шаблонизатора и его преимуществ](https://ru.bem.info/technology/bemhtml/current/rationale/)\n* [Справочное руководство по шаблонизатору BEMHTML](https://ru.bem.info/technology/bemhtml/current/reference/)\n* [Справочное руководство по шаблонизатору BEMTREE](https://ru.bem.info/technology/bemtree/current/bemtree/)\n* [Справочное руководство по BEMJSON](https://ru.bem.info/technology/bemjson/current/bemjson/)\n* [Шаблонизация данных](https://ru.bem.info/technology/bemhtml/current/templating/)\n* [JS-синтаксис](https://ru.bem.info/technology/bemhtml/current/bemhtml-js-syntax/)\n\nЛицензия\n--------\n\n© 2013 YANDEX LLC. Код лицензирован [Mozilla Public License 2.0](LICENSE.txt).\n",
  "readmeFilename": "README.md"
}
